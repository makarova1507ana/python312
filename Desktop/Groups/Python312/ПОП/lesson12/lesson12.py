# ---------------------- двумерные массивы ----------------------- #
# [[], []] - набор из других коллекций
# ["", ""]
# [(), ()]

# работа с двумерной коллекцией
# matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix = [[1, 2, 3],# 0-ая строка
          [4, 5, 6],# 1-ая строка
          [7, 8, 9]]# 2-ая строка

# # как обратиться к A[1][2]
# print(matrix[1][2]) # matrix[1] = [4, 5, 6]

# # как обратиться к каждой строке данного списка
# for row in matrix:
#     print(row)
#


# # как обратиться к A[i][j]
# for row in matrix: # row - список
#     print(row)
#     for el in row: # el - это элемент списка row
#         print(el)


# # как обратиться к A[i][j]
# for i_row in range(len(matrix)): # i_row - индекс строки
#     print(matrix[i_row])
#     for j_col in range(len(matrix[i_row])): # j_col - номер колонки
#         print(matrix[i_row][j_col])


# # распечатать главную диагональ (обязательное условие кол-во строк == кол-во столбцов)
# for i in range(len(matrix)):
#     print(matrix[i][i])

# дан номер строки и номер столбца, показать все соседние элементы
# # пример выхода за пределы матрицы
# i = 2
# j = 0
# print(matrix[i+1][j], "элемент находится ниже")



i = 2 # произвольная величина
j = 0 # произвольная величина
# if i-1 >= 0:
#   print(matrix[i-1][j], "элемент находится выше")
# if i+1 < len(matrix):
#     print(matrix[i+1][j], "элемент находится ниже")
#
# if j - 1 >= 0:
#     print(matrix[i][j-1], "элемент находится слева")
#
# if j + 1 < len(matrix):
#     print(matrix[i][j+1], "элемент находится справа")
#



# ----------------Задача------------------------#
# Дается длина списка N. Заполнить его 0
# N = 5
# l = []
# for i in range(N):
#     l.append(0)
# print(l)

# # 2 - способ
# N = 5
# l = [0] * N # [0, 1] * N
# print(l)

# ----------------Задача------------------------#
# Дается кол-во строк N, а еще кол-во столбцов M.
# Заполнить его 0
N = 5
M = 3


# matrix = []
# for i in range(N):
#     l = [0] * M # создается новая область памяти
#     matrix.append(l)
# matrix[1][1] = '*'
# print(matrix)

# # 2 - способ
# l = [0] * M
# matrix = [l] * 3  # можно итак, НО не надо
# matrix[1][1] = '*'
# print(matrix)



# #—------------------------------- Задача —--------------------------------#
# # Даны N и M (Длина и ширина двумерного списка).
# # Заполнить четные(отчет строки от 1) строки 0, нечетные строки 1.
# N = 5
# M = 5
# matrix = []
# for i in range(N): # i - в роли номера строки
#     if (i+1) % 2 == 0:
#         l = [0] * M
#     else:
#         l = [1] * M
#     matrix.append(l)
#
# # просто "красивый" вывод
# for row in matrix:
#     print(row)


# #—------------------------------- Задача —--------------------------------#
# # N и M (Длина и ширина двумерного списка).
# # Заполнить четные(отчет от 0) столбцы 0, нечетные столбцы 1.
# N = 3
# M = 5
# matrix = []
# # for i in range(N):
# #     l = []
# #     for j in range(M): # j - номер столбца
# #         if j % 2 == 0:
# #             l.append(0)
# #         else:
# #             l.append(1)
# #     matrix.append(l)
#
#
# #  --- 2 способ --- #
# for i in range(N):
#     if M % 2 == 0:
#         l = [0, 1] * (M//2)
#     else:
#         l = [0, 1] * (M // 2) + [0]
#     matrix.append(l)
#
#
# # просто "красивый" вывод
# for row in matrix:
#     print(row)



# #—------------------------------- Задача —--------------------------------#
# # Даны N и M (Длина и ширина двумерного списка).
# # Заполнить его в шахматном порядке 0 и 1
# #
# # пример шахматного порядка
# # N = 6
# # M= 4
# # 0, 1, 0, 1, 0, 1
# # 1, 0, 1, 0, 1, 0
# # 0, 1, 0, 1, 0, 1
# # 1, 0, 1, 0, 1, 0
#
# # учитывать четность столбцов и четность строки
# # четные строки начинаются с 1, далее идет чередование
# # нечетные строки начинаются с 0, далее идет чередование
#
#
# length = 5
# width = 5
#
# matrix = []
#
# for i in range(width):
#     l = []
#     for j in range(length):
#         if i % 2 == 0:
#             if j % 2 == 0:
#                 l.append(0)
#             else:
#                 l.append(1)
#         else:
#             if j % 2 == 0:
#                 l.append(1)
#             else:
#                 l.append(0)
#
#     matrix.append(l)
#
# for i in matrix:
#     print(i)
#
# # --- 2 способ --- #

# N = 3
# M = 5
# matrix = []
# for i in range(N):
#     if i % 2 == 0:
#         if M % 2 == 0:
#             l = [0, 1] * (M//2)
#         else:
#             l = [0, 1] * (M // 2) + [0]
#     else:
#         if M % 2 == 0:
#             l = [1, 0] * (M // 2)
#         else:
#             l = [1, 0] * (M // 2) + [1]
#     matrix.append(l)





# # #—------------------------------- Задача —--------------------------------#
# # дан произвольный двумерный массив.
# # Создать список с общей суммой элементов для каждой строки
#
# # пример
# # [1, 2, 3] = 6
# # [1, 1, 1, 1] = 4
# # result = [6, 4]
#
# data = [[1, 2, 3],
#         [1, 1, 1, 1],
#         [1]]
# # ожидаем получить [6, 4, 1]
# result = []
# for row in data:
#     result.append(sum(row))
#
# print(result)


# # #—------------------------------- Задача —--------------------------------#
# # дан произвольный двумерный массив.
# # Создать список в котором будет показаны максимальные числа для каждой строки
# # пример
# # [1, 2, 3] = 6
# # [1, 1, 1, 1] = 4
# # result = [6, 4]
#
# data = [[1, 2, 3],
#         [2, 2, 2, 2],
#         [1]]
#
# # ожидаем получить [3, 2, 1]
# result = []
# for row in data:
#     result.append(max(row))
#
# print(result)


# # #—------------------------------- Задача —--------------------------------#
# # дан произвольный двумерный массив. Заполненный строками.
# # Найти в каждой строке массива cамое длинное слово и узнать его длину
#
# # пример
# # ["Cat", "dog", "cat", "kitty"] = 5
# #  ["Cat", "dog", "cat"] = 3
# # ["", "", ""] = 0
# # ["", "A"] = 1
# # result = [5, 3, 0, 1]
#
# data = [["Cat", "dog", "cat", "kitty"],
#         ["Cat", "dog", "cat"],
#         ["", "", ""],
#         ["", "A"]]
# result = []
# for row in data:
#     result.append(len(max(row)))
#
# print(result)




# # #—------------------------------- Задача —--------------------------------#
# # дан произвольный двумерный массив. Заполненный строками.
# # Найти в каждой строке массива cамое длинное слово
#
# # пример
# # ["Cat", "dog", "cat", "kitty"] = "kitty"
# #  ["Cat", "dog", "cat"] = ["Cat", "dog", "cat"]
# # ["", "", ""] = ["", "", ""]
# # ["", "A"] = "A"
# # result = ["kitty", ["Cat", "dog", "cat"] , ["", "", ""], "A"]
#
# data = [["Cat", "dog", "cat", "kitty"],
#         ["Cat", "dog", "cat"],
#         ["", "", ""],
#         ["", "A"]]
# result = []
# for row in data:
#     l = []
#     for word in row:
#        if len(max(row)) == len(word):
#            l.append(word)
#     result.append(l)
#
# print(result)



#----------- DZ-----------
# распечатать 0-ую, 1-ую, 2-ую и т.д. колонку
# распечатать побочную диагональ
