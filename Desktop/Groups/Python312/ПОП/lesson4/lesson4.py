# # # задача
# # # Дано:
# # # n - кол-во сторон (гарантируется, что число целое)
# # # a - сторона многоугольника
# # # is_fill - нужно залить фигуру (гарантируется, что будет использован только логический тип данных)
# # # нарисовать ПРАВИЛЬНЫЙ многоугольник по заданным характеристикам
# #
# # #Алгоритм
# # # 1 - как нарисовать правильный многоугольник? (треугольник (3, 60), квадрат(4, 90), 5угольник (5, 120) ...  и т.д.)
# # #       1.1 n - кол-во сторон
# # #       1.2 angle - угол между двумя сосденими сторона 180*(n−2)/n
# # # 2 - заливка фигуру begin_fill()  &  end_fill()
# #
# # from turtle import *
# # from time import *
# # a = 100
# # n = 3
# # angle = 180*(n-2)/n
# # is_fill = False # True-закрашиваем or False - не закрашиваем
# # if is_fill:
# #     begin_fill()
# # for n_line in range(n):
# #     forward(a)
# #     left(180 - angle)
# # end_fill()
# # sleep(5)
# #
# # # begin_fill()
# # # circle(100)
# # # end_fill()
# # # sleep(5) #ожидаю получить закрашенный круг
#
#
# # даны два числа и операция, реализовать интерфейс для вычисления умножения или деления,
# # если введено неверное значение или операция сообщить об этом
#
# # ввод
# # 2 2 *  | 2 2 /  | 2 0 /
# # вывод
# # 4     | 1      | ошибка(разработчик Этой программы создал ее)
#
# # num1 = 2
# # num2 = 0
# # operation = input("Какая операция (* или /)? ")
# # if operation == '*':
# #     print(num1 * num2)
# # elif operation == '/':
# #     if num2 != 0:
# #         print(num1 / num2) # ZeroDivisionError: division by zero
# #     else:
# #         print("division by zero")
# # else:
# #     print("нет такой операции")
#
#
# #--------------------------обработка исключений------------------------------#
# # try (один в одном блоке)
# # except (сколько угодно в одном блоке)
# # else (необязательно)
# # finally (необязательно)
# # ----------------------- try, except, finally ---------------------#
# # try: #что-то пытаемся сделать
# #   если нет ошибок, то код выполняется в этом блоке до конца этого блока
#
# # except: # если были ошибки, то попадет в этот блок
# #   # обработка ошибок
#
# # else:# если  НЕ  было ошибок, то попадет в этот блок
#
# # finally: #срабтывает в любом случае
# #   # подгтовка данных и программы для корректного завершения работы
#
#
# # # ---------------------------------Пример---------------------------------------#
# # # деление
# # x = 4
# # y = 2
# # try:
# #     result = x / y
# # except ZeroDivisionError: #можем указать конкретную ошибку, а можно  слушать любую ошибку
# #     print("division by zero!")
# # except:
# #     print("unknown error")
# # else:
# #     print("result is", result)
# # finally:
# #     print("executing finally clause")
# #
# num1 = 2
# num2 = 0
# operation = input("Какая операция (* или /)? ")
# if operation == '*':
#     print(num1 * num2)
# elif operation == '/':
#     try:
#         print(num1 / num2) # ZeroDivisionError: division by zero если возникла перейдем на 97 строку
#     except ZeroDivisionError:
#         print("division by zero")
# else:
#     print("нет такой операции")
#

# #--------------------------Задание-------------------------------#
# #посчитать произведение двух чисел,
# # даны константы(создана переменная) pi = 3.14 и константа r = 5
# # s = ?
# try:
#     num1 = float(input("num1 = "))
#     num2 = float(input("num2 = "))
#     print(num1 * num2)
# except:
#     print("ValueError")
# finally:
#     print("КОНЕЦ 1 части программы")
# pi = 3.14
# r = 5
# print(pi * r)


# # # Задание 2: Дан список элементов 1, 3, 22, 7, 12, 8, 2
# # (могут быть какие-то другие значения, ввод данных делать не нужно)
# # # 2.1. показать каждый элемент, последняя цифра которого 2
#
# sheet = [1 , 3, 22, 7, 12, 8, 2, 102, 76]
# print('Элементы, последняя цифра которого 2:')
# for i in sheet:
#     print(f"\n{i}% {10} = {i%10}") #отладочная печать
#     if i % 10 == 2:
#         print(i, end = ' ')
# print('\n')


# ------------------------------ Коллекционный тип данных----------------------------------- #
# коллеция - набор значений  (массив)
# array - массив - надо подключать - динамеческий размер + одинаковый тип данных
# list - список
# tuple - кортеж
# set - множетсво
# dict (dictinary) - словарь
# str (string)

# import array
# arr = array.array('i', [1, 104, 45, 98])#
# arr.append('*')
# for el in arr:
#     print(el)

# list - динамический размер, но значения могут быть любого типа
# l = ['Heelo', 5, 5.54, [11,'3']]
# l[0] = 'H'  #l[0] - обращение по индексу

# tuple - кортеж
# значения могут быть любого типа
# Но нельзя изменить
# t = (1, "Hello", [2, 3])
# t[0] = 5 # TypeError: 'tuple' object does not support item assignment


# # # set - множетсво
# # # динамический размер
# # # хранит только уникальные значения
# l = ['0',8,1,1,1,1,2,111111,3,4,5,7,1, '1']
# s = set(l)
# print(s)

# # dict (dictinary) - словарь
# # динамический размер
# # ключ(Должны быть уникальные): значение(может повторяться)
# d = {"key": 1, 2: "2"}



#-------------------------------- list--------------------------------------------------#
# list - динамический размер, но значения могут быть любого типа
# l = ['Heelo', 5, 5.54, [11,'3']]
# l[0] = 'H'  #l[0] - обращение по индексу

# ------------------ Добавление элементы-----------------------#
l = [5,2,3]

#     #добавление элементов в конец
# l.append(1) # вызов через "посредника" (в данном случае список)
# print(l)

#     # добавление элементов в произвольное место
# l.insert(1, "*")  # insert(index, что хотим вставить)
# print(l)

#len() #вызов сам по себе (не требует создание кого-то объекта(переменные или что-то еще определенного типа))


# # ------------ Редактирование элемента ----------------#
# l = [5,2,3]
# l[0] = "*"
# print(l)

# #---------------- Удаление элементов ---------------#
# l = [5, 2, 3, 5]
# l.pop(1) # pop(index) -> l[1] будет удален
# print(l)
# l.remove(5) # remove(value) -> [4,4,value,3, value] -> value(только первые сначала отсчета) будет удален
# print(l)

# удаление всех элементов
# l.clear()


# ------------------------- Анализ  элемента(ов)----------------- #
# l = [5, 2, 5, 3, 5]
# # посчитать кол-во элементов в списке по значению
# count_5 = l.count(5) # count(5) - посчитает кол-во элементов в списке
# print(count_5)

# # кол-во всех элементов в списке или его длина
# l = [5, 2, 5, 3, 5]
# print(len(l))

# # поиск элемента в списке
# l = [5, 2, 5, 3, 5]
# print(5 in l) #вернет True -если есть хотя бы 1 элемент


# #--------------------------------задание----------------------------------------------#
# # Создать список из случайных чисел от -100 до 100 (произвольного размера)
# import random as r
# length = 5
# l = []
# for n in range(length):
#     l.append(r.randint(-100, 100))
# print(l)


# #--------------------------------задание----------------------------------------------#
# удалить все 5 в списке
# l = [5, 2, 5, 3, 5]
# for el in l:
#     try:
#         l.remove(5) # remove(5) -> 5 будет удален в списке (только первый)
#     except:
#         break #закончились 5, которые нужно было удалить
#
# print(f"{l} \n Все 5 были удалены")

# # ------------------2 способ -----------------#
# l = [5, 2, 5, 3, 5]
# count_5 = l.count(5) # count(5) - посчитает кол-во элементов в списке
# for i in range(count_5):
#     l.remove(5)
# print(f"{l} \n Все 5 были удалены")



# #--------------------------------задание----------------------------------------------#
# # дан список элементов(его менять нельзя)
# # создать новый список,
# # # который будет содеражать только четные элементы
# # НЕЛЬЗЯ использовать map и любые другие функции высшего порядка
# lst = [1, 2, 3, 4, 5, 6]
# lst_new = []
# for i in lst:
#     if i % 2 == 0:
#         lst_new.append(i)
# print(lst_new)


# # #--------------------------------Задача-------------------------------------#
# # # дана длина списка
# # # заполнить четные места (индекс) '*', а нечетные '.'
# length = 10
# lst = []
# for i in range(length):
#     if i % 2 == 0:
#         lst.append('*')
#     else:
#         lst.append('.')


# # # #--------------------------------Задача-------------------------------------#
# # # # дана  список
# # #  надо  вывести  пары соседних элементов
# l = [1, 2, 3, 4, 5, 6, 7, 8]
#
# for i in range(0, len(l) - 1):
#     print(l[i], l[i + 1])
#
# # ----------------------второй способ----------------------------
#
# for i in range(1, len(l)):
#     print(l[i-1], l[i])



#--------------------------------Задача-------------------------------------#
# Даны два списка чисел. Посчитайте,
# сколько чисел содержится одновременно как в первом списке,
# так и во втором.
#
# 1 3 2
# 4 3 2
#
# 2

# 1 3 2
# 4 3 2 3

# 2

# 1 3 2 3
# 4 3 2 3

# 3
l1 = [4, 3, 2, 3]
l2 = [1, 3, 2, 3]
counter = 0
for el in l1:
    if el in l2:
        counter += 1
print(counter)


