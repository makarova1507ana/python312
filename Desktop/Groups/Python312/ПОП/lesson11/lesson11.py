# #
# # """Дан список чисел(можно
# # создать
# # любым
# # способом, но
# # приветствуется
# # через
# # лямбду
# # функцию
# # и
# # random).
# # # Создать новый список при помощи filter(), отобрать значения по маске 3*3? , где * - любое кол-во цифр, ? - одна цифра
# # # Вычислить при помощи reduce() произведение нового списка
# # # Пример работы маски
# # # даны числа
# # # 31139
# # # 339
# # # 1339
# # # 33
# # # вывод
# # # 31139
# # # 339
# # """
# # import functools
# # import random
# # import re
# #
# # num_rang = lambda x: random.randint(0, 100000)
# # list_num_rang = list(map(num_rang, range(50)))
# #
# # list_num_rang = [31139,
# # 339,
# # 1339,
# # 33]
# # #str_num_rang = ''.join(str(el) for el in list_num_rang)
# # #print(str_num_rang)
# #
# # pattern = r"3\d*?3\d{1}"
# # list_num_rang = list(filter(lambda num: re.fullmatch(pattern, str(num)), list_num_rang))
# # print(list_num_rang)
#
#
#
#
#
# # ------------------------------ Тестирование --------------------------#
# """
# тестирование - проверка ожидания и реальности (показывает есть ли ошибки)
# """
#
#
# """
# методы отладки (показывает где именно в коде есть баг):
# 1. Визуальный анализ
# 2. отладочная печать
# 3. отладчик (дебаггер) - отдельная программа
# 4. логирование - как отладочная печать только данные записываются в файл
# """
# import random
# def sum_2_0(a, b):
#     # еще пример отладочной печати
#     print(f"sum_2_0 запустилась и она вернула -> { a - b}")
#
#     return a - b #намеренная ошибка - баг "bug"
#
# a = 5
# b = 5
# # print(значения переменных, выражений, результаты функции, типы данных) - пример отладочная печать
# print(f"входные значения:{a}+{b}\n ожидаемый результат = 10 \nфактический результат : {sum_2_0(5, 5)}") # ожидаемый результат 10
# a = 6
# b = -5
# print("*"*10)
# print(f"входные значения:{a}+{b}\n ожидаемый результат = 1  \nфактический результат : {sum_2_0(6, -5)}")# ожидаемый результат 1
# a = 0
# b = 5
# print("*"*10)
# print(f"входные значения:{a}+{b}\n ожидаемый результат = 5 \nфактический результат : {sum_2_0(0, 5)}") # ожидаемый результат 5
#








#

#—------------------------------- Задача —--------------------------------#
# Написать функцию month_to_season(), которая принимает
# 1 аргумент - номер месяца - и возвращает название сезона, к которому относится этот месяц.
# Например, передаем 2, на выходе получаем 'Зима'.




# Имя функции: month_to_season
# Параметр: month
def month_to_season(month):
    # Создание словаря для хранения информации о сезонах
    # Ключ: кортеж(tuple) из номеров входящих в сезон месяцов
    # Значение: строка(str)-название сезона
    season_ranges = {
        (12, 1, 2): 'Winter',
        (3, 4, 5): 'Spring',
        (6, 7, 8): 'Summer',
        (9, 10, 11): 'Autumn'
    }
    # Создание переменной для возвращаемого значения функции
    season = None

    # Цикл, в котором по очереди перебираются пары ключ-значение(номера месяцев - сезон) из словаря
    for key, value in season_ranges.items():
        # Если значение входного параметра(номер месяца) входит в состав ключа(пример ключа - (3, 4, 5))
        if month in key:
            # То присваиваем возвращаемой переменной season название сезона
            season = value
            # Останавливаем цикл
            break

    # Возвращаем название сезона
    return season





# Проверяем работу функции
#
# 1 -> 'Зима'
# 2 -> 'Зима'
# 3 -> 'Весна'
# ...
# 6 -> 'Лето'
# ...
# 9 -> 'Осень'
# 999 -> None неверные данные
# 0 ->None неверные данные
# 5.5 ->None неверные данные
month = int(input("введите месяц"))
print(month, month_to_season(1), month_to_season(1) == 'Winter' ) #исправили баг был здесь  (6, 7, 1): 'Summer',
# print(2, month_to_season(2),  month_to_season(2) == 'Winter')
# print(3, month_to_season(3),  month_to_season(3) == 'Spring')
# print(6, month_to_season(6), month_to_season(6) == 'Summer')
# print(9, month_to_season(9), month_to_season(9) == 'Autumn')
# print(8, month_to_season(8), month_to_season(8) == 'Summer')
# print(12, month_to_season(12), month_to_season(12) == 'Winter')
# print(999, month_to_season(999), month_to_season(999) == None)
# print(0, month_to_season(0), month_to_season(0) == None) #баг
# print(5.5, month_to_season(5.5), month_to_season(5.5)== None)
