<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Anastasia/Desktop/Groups/Python312/DB/lesson2/lesson2.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="1449"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,15:mainsqlite_sequence"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Orders" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="52"/><column index="2" value="85"/><column index="3" value="91"/><column index="4" value="62"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="71"/><column index="2" value="52"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="students" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="52"/><column index="2" value="94"/><column index="3" value="90"/><column index="4" value="52"/><column index="5" value="67"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/* Создание таблицы &quot;Студенты&quot;:
Создайте таблицу с именем &quot;Students&quot;.
Включите столбцы для идентификатора студента, имени, фамилии, возраста и курса.
Установите первичный ключ для столбца идентификатора студента.
Убедитесь, что столбцы имени и фамилии не могут содержать пустые значения.
Добавьте 3 записи
*/
CREATE TABLE IF NOT EXISTS students (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	firstName TEXT NOT NULL,
	lastName TEXT NOT NULL,
	age INTEGER DEFAULT 18 CHECK (age &gt; 0), 
	course INTEGER
);

-- INSERT INTO students(firstName, lastName) VALUES (&quot;Иван&quot;, &quot;Иванов&quot;);
/*INSERT INTO students(firstName, lastName, course) 
VALUES 
(&quot;Мария&quot;, &quot;Иванова&quot;, 1),
(&quot;Игорь&quot;, &quot;Ломтев&quot;, 2);

INSERT INTO students(age, firstName, lastName, course) 
VALUES 
(20, &quot;Алина&quot;, &quot;Лукина&quot;, 1)*/
/*INSERT INTO students(age, firstName, lastName, course) 
VALUES 
(-10, &quot;Алина&quot;, &quot;Лукина&quot;, 1) */-- запись не может быть добавлена

-- SELECT * from students;


/*------------------------------------------------------------*/
/*

Создание таблицы &quot;Заказы&quot;:
Создайте таблицу с именем &quot;Orders&quot;.
Включите столбцы для идентификатора заказа, идентификатора клиента, даты заказа и общей суммы.
Установите первичный ключ для столбца идентификатора заказа.
Добавьте 3 записи
*/


CREATE TABLE IF NOT EXISTS orders (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	id_client INTEGER NOT NULL,
	date_z DATE NOT NULL,
	summ INTEGER CHECK (summ &gt; 0)
);
/*
INSERT INTO orders(id_client, date_z, summ) VALUES ( 7777, &quot;2024-02-21&quot;, 1000);
INSERT INTO orders(id_client, date_z, summ) VALUES ( 7747, &quot;2024-01-21&quot;, 1500);
INSERT INTO orders(id_client, date_z, summ) VALUES ( 7787, &quot;2023-02-21&quot;, 1300);
*/

-- SELECT * FROM orders;
-- SELECT date_z FROM orders;
-- SELECT date_z, summ FROM orders;


/*------------------------------------------------------------*/
SELECT * FROM students;
-- покажи записи о студентах первого курса
SELECT * FROM students WHERE course = 1;
-- покажи всех студентов старше 20 лет
SELECT * FROM students WHERE age &gt;= 20;
-- покажи всех студентов младше 20 лет и учащиеся на 2 курсе
SELECT * FROM students WHERE age &lt; 20 AND course = 2;

-- Покажи студентов с фамилией Иванов(а)
SELECT * FROM students WHERE lastName LIKE &quot;Иванов%&quot;;


-- SELECT * FROM students WHERE lastName LIKE &quot;И[ВИАНО]&quot;;
</sql><sql name="lesson2.sql">/* Создание таблицы &quot;Студенты&quot;:
Создайте таблицу с именем &quot;Students&quot;.
Включите столбцы для идентификатора студента, имени, фамилии, возраста и курса.
Установите первичный ключ для столбца идентификатора студента.
Убедитесь, что столбцы имени и фамилии не могут содержать пустые значения.
Добавьте 3 записи
*/
CREATE TABLE IF NOT EXISTS students (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	firstName TEXT NOT NULL,
	lastName TEXT NOT NULL,
	age INTEGER DEFAULT 18 CHECK (age &gt; 0),
	course INTEGER
);

-- INSERT INTO students(firstName, lastName) VALUES (&quot;Иван&quot;, &quot;Иванов&quot;);
/*INSERT INTO students(firstName, lastName, course)
VALUES
(&quot;Мария&quot;, &quot;Иванова&quot;, 1),
(&quot;Игорь&quot;, &quot;Ломтев&quot;, 2);

INSERT INTO students(age, firstName, lastName, course)
VALUES
(20, &quot;Алина&quot;, &quot;Лукина&quot;, 1)*/
/*INSERT INTO students(age, firstName, lastName, course)
VALUES
(-10, &quot;Алина&quot;, &quot;Лукина&quot;, 1) */-- запись не может быть добавлена

-- SELECT * from students;


/*------------------------------------------------------------*/
/*

Создание таблицы &quot;Заказы&quot;:
Создайте таблицу с именем &quot;Orders&quot;.
Включите столбцы для идентификатора заказа, идентификатора клиента, даты заказа и общей суммы.
Установите первичный ключ для столбца идентификатора заказа.
Добавьте 3 записи
*/


CREATE TABLE IF NOT EXISTS orders (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	id_client INTEGER NOT NULL,
	date_z DATE NOT NULL,
	summ INTEGER CHECK (summ &gt; 0)
);
/*
INSERT INTO orders(id_client, date_z, summ) VALUES ( 7777, &quot;2024-02-21&quot;, 1000);
INSERT INTO orders(id_client, date_z, summ) VALUES ( 7747, &quot;2024-01-21&quot;, 1500);
INSERT INTO orders(id_client, date_z, summ) VALUES ( 7787, &quot;2023-02-21&quot;, 1300);
*/

-- SELECT * FROM orders;
-- SELECT date_z FROM orders;
-- SELECT date_z, summ FROM orders;


/*------------------------------------------------------------*/
SELECT * FROM students;
-- покажи записи о студентах первого курса
SELECT * FROM students WHERE course = 1;
-- покажи всех студентов старше 20 лет
SELECT * FROM students WHERE age &gt;= 20;
-- покажи всех студентов младше 20 лет и учащиеся на 2 курсе
SELECT * FROM students WHERE age &lt; 20 AND course = 2;

-- Покажи студентов с фамилией Иванов(а)
SELECT * FROM students WHERE lastName LIKE &quot;Иванов%&quot;;


-- SELECT * FROM students WHERE lastName LIKE &quot;И[ВИАНО]&quot;;
</sql><current_tab id="1"/></tab_sql></sqlb_project>
